<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stdiet.custom.mapper.SysMessageNoticeMapper">

    <resultMap type="SysMessageNotice" id="SysMessageNoticeResult">
        <result property="id"    column="id"    />
        <result property="messageProperty"    column="message_property"    />
        <result property="messageCustomer"    column="message_customer"    />
        <result property="messageType"    column="message_type"    />
        <result property="messageTitle"    column="message_title"    />
        <result property="messageContent"    column="message_content"    />
        <result property="readType"    column="read_type"    />
        <result property="messageKey"    column="message_key"    />
        <result property="createTime"    column="create_time"    />
        <result property="createBy"    column="create_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="delFlag"    column="del_flag"    />
    </resultMap>

    <resultMap type="com.stdiet.custom.dto.response.MessageNoticeResponse" id="SysMessageNoticeResponse">
        <result property="id"    column="id"    />
        <result property="messageProperty"    column="message_property"    />
        <result property="messageCustomer"    column="message_customer"    />
        <result property="messageType"    column="message_type"    />
        <result property="messageTitle"    column="message_title"    />
        <result property="messageContent"    column="message_content"    />
        <result property="readType"    column="read_type"    />
        <result property="messageKey"    column="message_key"    />
        <result property="createTime"    column="create_time"    />
    </resultMap>

    <sql id="selectSysMessageNoticeVo">
        id, message_property, message_customer, message_type, message_title, message_content, read_type, message_key, create_time, create_by, update_time, update_by, del_flag
    </sql>

    <select id="selectSysMessageNoticeList" parameterType="SysMessageNotice" resultMap="SysMessageNoticeResult">
        select
        <include refid="selectSysMessageNoticeVo"/>
        from sys_message_notice
        where del_flag = 0
    </select>

    <select id="selectSysMessageNoticeById" parameterType="Long" resultMap="SysMessageNoticeResult">
        select
        <include refid="selectSysMessageNoticeVo"/>
        from sys_message_notice
        where id = #{id} and del_flag = 0 order by id desc
    </select>

    <insert id="insertSysMessageNotice" parameterType="SysMessageNotice">
        insert into sys_message_notice
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="messageProperty != null">message_property,</if>
            <if test="messageCustomer != null">message_customer,</if>
            <if test="messageType != null">message_type,</if>
            <if test="messageTitle != null">message_title,</if>
            <if test="messageContent != null">message_content,</if>
            <if test="readType != null">read_type,</if>
            <if test="messageKey != null">message_key,</if>
            <if test="createTime != null">create_time,</if>
            <if test="createBy != null">create_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="delFlag != null">del_flag,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="messageProperty != null">#{messageProperty},</if>
            <if test="messageCustomer != null">#{messageCustomer},</if>
            <if test="messageType != null">#{messageType},</if>
            <if test="messageTitle != null">#{messageTitle},</if>
            <if test="messageContent != null">#{messageContent},</if>
            <if test="readType != null">#{readType},</if>
            <if test="messageKey != null">#{messageKey},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="delFlag != null">#{delFlag},</if>
        </trim>
    </insert>

    <update id="updateSysMessageNotice" parameterType="SysMessageNotice">
        update sys_message_notice
        <trim prefix="SET" suffixOverrides=",">
            <if test="messageProperty != null">message_property = #{messageProperty},</if>
            <if test="messageCustomer != null">message_customer = #{messageCustomer},</if>
            <if test="messageType != null">message_type = #{messageType},</if>
            <if test="messageTitle != null">message_title = #{messageTitle},</if>
            <if test="messageContent != null">message_content = #{messageContent},</if>
            <if test="readType != null">read_type = #{readType},</if>
            <if test="messageKey != null">message_key = #{messageKey},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="delFlag != null">del_flag = #{delFlag},</if>
        </trim>
        where id = #{id}
    </update>

    <update id="deleteSysMessageNoticeById" parameterType="Long">
        update sys_message_notice set del_flag = 1 where id = #{id}
    </update>

    <update id="deleteSysMessageNoticeByIds" parameterType="String">
        update sys_message_notice set del_flag = 1 where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 根据客户ID获取用户的消息 -->
    <select id="getCustomerMessage" parameterType="SysMessageNotice" resultMap="SysMessageNoticeResponse">
        select
        smn.id, smn.message_property, smn.message_customer, smn.message_type, smn.message_title, smn.message_content, smn.read_type, smn.message_key, smn.create_time
        from sys_message_notice smn
        where smn.del_flag = 0  and (smn.message_property = 0 or smn.message_customer = #{messageCustomer})
        <if test="readType != null">
           and smn.read_type = #{readType}
        </if>
        <if test="messageType != null">
            and smn.message_type = #{messageType}
        </if>
        order by smn.id desc
    </select>

    <!-- 根据客户ID获取用户的消息数量 -->
    <select id="getCustomerMessageCount" parameterType="SysMessageNotice" resultType="int">
        select count(smn.id)
        from sys_message_notice smn
        where smn.del_flag = 0  and (smn.message_property = 0 or smn.message_customer = #{messageCustomer})
        <if test="readType != null">
            and smn.read_type = #{readType}
        </if>
        <if test="messageType != null">
            and smn.message_type = #{messageType}
        </if>
    </select>

    <!-- 根据客户ID查询打卡点评消息（包含点评营养师信息、客户信息、点评内容） -->
    <select id="getPunchCommentMessageByCusId" parameterType="Long" resultType="Map">
        select
         message.id,message.message_type as messageType, message.message_content as content, message.read_type as readType,
        DATE_FORMAT(message.create_time,'%Y-%m-%d %H:%i') as createTime, log.id as punchId, log.health_manifesto as healthManifesto,info.nick_name cusNickName,info.avatar_url as cusAvatar,diet.nick_name as dietNickName,diet.avatar as dietAvatar
        from (
            select id,message_customer,message_type,message_title,message_content,message_key,read_type,create_time from sys_message_notice
            where del_flag = 0 and message_property = 1 and message_customer = #{cusId}
            and message_type = 1
        ) message
        left join sys_wx_user_log log on log.id = message.message_key and log.del_flag = 0
        left join sys_wx_user_info info on info.openid = log.openid
        left join sys_customer cus on cus.del_flag = 0 and cus.id = message.message_customer
        left join sys_user diet on diet.user_id = cus.main_dietitian and diet.del_flag = 0 and diet.status = 0
        order by message.id desc
    </select>

    <!-- 根据用户查询打卡点评的未读消息 -->
    <select id="getUnReadPunchMessageNum" parameterType="Long" resultType="int">
        select count(id) from sys_message_notice
        where del_flag = 0 and message_property = 1
        and message_type = 1 and read_type = 0 and message_customer = #{cusId}
    </select>

    <!-- 根据打卡ID、点赞openid查询点赞消息 -->
    <select id="getMessageByPunchIdAndOpenId" resultMap="SysMessageNoticeResult">
         select * from sys_message_notice where message_property = 1 and del_flag = 0 and message_type = 2
         and message_key = #{punchId} and message_content = #{openid} order by id desc  limit 1
    </select>

    <!-- 根据客户ID查询点赞消息 -->
    <select id="getPunchDynamicThumbsUpMessage" parameterType="Long" resultType="Map">
        select message.id,message.read_type as readType, message.message_type as messageType,DATE_FORMAT(message.create_time,'%Y-%m-%d %H:%i') as createTime, log.id as punchId, log.health_manifesto as healthManifesto,
        thumbsUpUser.nick_name as thumbsUpUserNickName,thumbsUpUser.avatar_url as thumbsUpUserAvatar, punchUser.nick_name as cusNickName, punchUser.avatar_url as cusAvatarUrl
        from
        (
            select id,message_customer,message_type,message_title,message_content,message_key,read_type,create_time from sys_message_notice
            where del_flag = 0 and message_property = 1 and message_customer = #{cusId}
            and message_type = 2
        ) message
        left join sys_wx_user_info as thumbsUpUser on thumbsUpUser.openid = message.message_content
        left join sys_wx_user_log as log on log.id = message.message_key and log.del_flag = 0
        left join sys_wx_user_info as punchUser on punchUser.openid = log.openid
        order by message.id desc
    </select>

    <!-- 查询点赞未读消息数量 -->
    <select id="getUnReadThumbsUpMessageNum"  parameterType="Long" resultType="int">
        select count(id) from sys_message_notice
        where del_flag = 0 and message_property = 1 and read_type = 0  and message_type = 2  and message_customer = #{cusId}
    </select>

    <!-- 查询消息是否存在 -->
    <select id="getMessageByCusIdAndTypeKey" parameterType="SysMessageNotice" resultMap="SysMessageNoticeResult">
        select * from sys_message_notice where del_flag = 0  and message_customer = #{messageCustomer}
        and message_type = #{messageType} and message_key= #{messageKey} order  by id desc limit 1
    </select>

    <!-- 查询服务消息（包含食谱更新消息、意见反馈回复消息） -->
    <select id="getServiceMessage" parameterType="Long" resultType="Map">
        select id, message_content as content, message_key as messageKey,
        read_type as readType, message_type as messageType, DATE_FORMAT(create_time,'%Y-%m-%d %H:%i') as createTime from sys_message_notice
        where del_flag = 0 and message_property = 1 and message_customer = #{cusId}
        and (message_type = 3 or message_type = 4)
        order by id desc
    </select>

    <!-- 查询未读服务消息数量 -->
    <select id="getUnReadServiceMessageNum"  parameterType="Long" resultType="int">
        select count(id) from sys_message_notice
        where del_flag = 0 and message_property = 1 and read_type = 0  and (message_type = 3 || message_type = 4)  and message_customer = #{cusId}
    </select>
</mapper>